# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import lock_pb2 as lock__pb2


class GLOCKStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Unlock = channel.unary_unary(
        '/lock.GLOCK/Unlock',
        request_serializer=lock__pb2.GlockRequest.SerializeToString,
        response_deserializer=lock__pb2.GlockResponse.FromString,
        )
    self.Lock = channel.unary_unary(
        '/lock.GLOCK/Lock',
        request_serializer=lock__pb2.GlockRequest.SerializeToString,
        response_deserializer=lock__pb2.GlockResponse.FromString,
        )


class GLOCKServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Unlock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Lock(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GLOCKServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Unlock': grpc.unary_unary_rpc_method_handler(
          servicer.Unlock,
          request_deserializer=lock__pb2.GlockRequest.FromString,
          response_serializer=lock__pb2.GlockResponse.SerializeToString,
      ),
      'Lock': grpc.unary_unary_rpc_method_handler(
          servicer.Lock,
          request_deserializer=lock__pb2.GlockRequest.FromString,
          response_serializer=lock__pb2.GlockResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'lock.GLOCK', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
